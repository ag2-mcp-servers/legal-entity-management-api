# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:03:45+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class Type(Enum):
    auLocal = 'auLocal'


class AULocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=5, max_length=9) = Field(
        ..., description='The bank account number, without separators or whitespace.'
    )
    bsbCode: constr(min_length=6, max_length=6) = Field(
        ...,
        description='The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.',
    )
    type: Type = Field(..., description='**auLocal**')


class AcceptTermsOfServiceRequest(BaseModel):
    acceptedBy: Optional[str] = Field(
        None,
        description='The unique identifier of the user accepting the Terms of Service.',
    )
    ipAddress: Optional[str] = Field(
        None, description='The IP address of the user accepting the Terms of Service.'
    )


class Type1(Enum):
    adyenAccount = 'adyenAccount'
    adyenCapital = 'adyenCapital'
    adyenCard = 'adyenCard'
    adyenForPlatformsAdvanced = 'adyenForPlatformsAdvanced'
    adyenForPlatformsManage = 'adyenForPlatformsManage'
    adyenFranchisee = 'adyenFranchisee'
    adyenIssuing = 'adyenIssuing'


class AcceptTermsOfServiceResponse(BaseModel):
    acceptedBy: Optional[str] = Field(
        None,
        description='The unique identifier of the user that accepted the Terms of Service.',
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the Terms of Service acceptance.'
    )
    ipAddress: Optional[str] = Field(
        None,
        description='The IP address of the user that accepted the Terms of Service.',
    )
    language: Optional[str] = Field(
        None,
        description='The language used for the Terms of Service document, specified by the two letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code. For example, **nl** for Dutch.',
    )
    termsOfServiceDocumentId: Optional[str] = Field(
        None, description='The unique identifier of the Terms of Service document.'
    )
    type: Optional[Type1] = Field(None, description='The type of Terms of Service.')


class Type2(Enum):
    gbSortCode = 'gbSortCode'
    usRoutingNumber = 'usRoutingNumber'


class AdditionalBankIdentification(BaseModel):
    code: Optional[str] = Field(
        None, description='The value of the additional bank identification.'
    )
    type: Optional[Type2] = Field(
        None,
        description='The type of additional bank identification, depending on the country.\n\nPossible values:\n\n * **gbSortCode**: The 6-digit [UK sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or spaces\n * **usRoutingNumber**: The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or spaces.',
    )


class Address(BaseModel):
    city: Optional[str] = Field(
        None,
        description='The name of the city. Required if `stateOrProvince` is provided.\n\nIf you specify the city, you must also send `postalCode` and `street`.',
    )
    country: str = Field(
        ...,
        description='The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.',
    )
    postalCode: Optional[str] = Field(
        None,
        description='Postal code. Required if `stateOrProvince` and/or `city` is provided.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-letter ISO 3166-2 state or province code. For example, **CA** in the US. \n\nIf you specify the state or province, you must also send `city`, `postalCode`, and `street`.',
    )
    street: Optional[str] = Field(
        None,
        description='The name of the street, and the house or building number. Required if `stateOrProvince` and/or `city` is provided.',
    )
    street2: Optional[str] = Field(
        None, description='The apartment, unit, or suite number.'
    )


class Amount(BaseModel):
    currency: Optional[str] = Field(
        None, description='The type of currency. Must be EUR (or EUR equivalent)'
    )
    value: Optional[int] = Field(
        None, description='Total value of amount. Must be >= 0'
    )


class Attachment(BaseModel):
    content: str = Field(
        ..., description='The document in Base64-encoded string format.'
    )
    contentType: Optional[str] = Field(
        None,
        description='The file format.\n\n Possible values: **application/pdf**, **image/jpg**, **image/jpeg**, **image/png**. ',
    )
    filename: Optional[str] = Field(
        None, description='The name of the file including the file extension.'
    )
    pageName: Optional[str] = Field(
        None, description='The name of the file including the file extension.'
    )
    pageType: Optional[str] = Field(
        None,
        description='Specifies which side of the ID card is uploaded.\n\n* When `type` is **driversLicense** or **identityCard**, set this to **front** or **back**.\n\n* When omitted, we infer the page number based on the order of attachments.',
    )


class BirthData(BaseModel):
    dateOfBirth: Optional[str] = Field(
        None, description="The individual's date of birth, in YYYY-MM-DD format."
    )


class Service(Enum):
    paymentProcessing = 'paymentProcessing'
    issuing = 'issuing'
    banking = 'banking'


class AccountType(Enum):
    checking = 'checking'
    savings = 'savings'


class Type3(Enum):
    caLocal = 'caLocal'


class CALocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=5, max_length=12) = Field(
        ...,
        description='The 5- to 12-digit bank account number, without separators or whitespace.',
    )
    accountType: Optional[AccountType] = Field(
        'checking',
        description='The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.',
    )
    institutionNumber: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The 3-digit institution number, without separators or whitespace.',
    )
    transitNumber: constr(min_length=5, max_length=5) = Field(
        ..., description='The 5-digit transit number, without separators or whitespace.'
    )
    type: Type3 = Field(..., description='**caLocal**')


class Type4(Enum):
    czLocal = 'czLocal'


class CZLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=2, max_length=17) = Field(
        ...,
        description='The 2- to 16-digit bank account number (Číslo účtu) in the following format:\n\n- The optional prefix (předčíslí).\n\n- The required second part (základní část) which must be at least two non-zero digits.\n\nExamples:\n\n- **19-123457** (with prefix)\n\n- **123457** (without prefix)\n\n- **000019-0000123457** (with prefix, normalized)\n\n- **000000-0000123457** (without prefix, normalized)',
    )
    bankCode: constr(min_length=4, max_length=4) = Field(
        ...,
        description='The 4-digit bank code (Kód banky), without separators or whitespace.',
    )
    type: Type4 = Field(..., description='**czLocal**')


class Type5(Enum):
    BankAccount = 'BankAccount'
    Document = 'Document'
    LegalEntity = 'LegalEntity'


class CapabilityProblemEntityRecursive(BaseModel):
    documents: Optional[List[str]] = None
    id: Optional[str] = None
    type: Optional[Type5] = None


class FundingSourceEnum(Enum):
    credit = 'credit'
    debit = 'debit'
    prepaid = 'prepaid'


class Interval(Enum):
    daily = 'daily'
    monthly = 'monthly'
    weekly = 'weekly'


class CapabilitySettings(BaseModel):
    amountPerIndustry: Optional[Dict[str, Amount]] = Field(
        None, description='The maximum amount a card holder can spend per industry.'
    )
    authorizedCardUsers: Optional[bool] = Field(
        None, description='The number of card holders who can use the card.'
    )
    fundingSource: Optional[List[FundingSourceEnum]] = Field(
        None, description='The funding source of the card, for example **debit**.'
    )
    interval: Optional[Interval] = Field(
        None, description='The period when the rule conditions apply.'
    )
    maxAmount: Optional[Amount] = Field(
        None, description='The maximum amount a card holder can withdraw per day.'
    )


class Type7(Enum):
    dkLocal = 'dkLocal'


class DKLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=4, max_length=10) = Field(
        ...,
        description='The 4-10 digits bank account number (Kontonummer) (without separators or whitespace).',
    )
    bankCode: constr(min_length=4, max_length=4) = Field(
        ...,
        description='The 4-digit bank code (Registreringsnummer) (without separators or whitespace).',
    )
    type: Type7 = Field(..., description='**dkLocal**')


class Type8(Enum):
    bankStatement = 'bankStatement'
    driversLicense = 'driversLicense'
    identityCard = 'identityCard'
    nationalIdNumber = 'nationalIdNumber'
    passport = 'passport'
    proofOfAddress = 'proofOfAddress'
    proofOfNationalIdNumber = 'proofOfNationalIdNumber'
    proofOfResidency = 'proofOfResidency'
    registrationDocument = 'registrationDocument'
    vatDocument = 'vatDocument'
    proofOfOrganizationTaxInfo = 'proofOfOrganizationTaxInfo'
    proofOfIndustry = 'proofOfIndustry'
    constitutionalDocument = 'constitutionalDocument'


class DocumentReference(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Identifies whether the document is active and used for checks.',
    )
    description: Optional[str] = Field(
        None, description='Your description for the document.'
    )
    fileName: Optional[str] = Field(None, description='Document name.')
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )
    modificationDate: Optional[datetime] = Field(
        None, description='The modification date of the document.'
    )
    type: Optional[str] = Field(
        None,
        description='Type of document, used when providing an ID number or uploading a document.',
    )


class EntityReference(BaseModel):
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )


class GeneratePciDescriptionRequest(BaseModel):
    language: Optional[str] = Field(
        None,
        description='Sets the language of the PCI questionnaire. Its value is a two-character [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code, for example, **en**.',
    )


class GeneratePciDescriptionResponse(BaseModel):
    content: Optional[str] = Field(
        None, description='The generated questionnaires in a base64 encoded format.'
    )
    language: Optional[str] = Field(
        None,
        description='The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code for the questionnaire. For example, **en**.',
    )
    pciTemplateReferences: Optional[List[str]] = Field(
        None,
        description='The array of Adyen-generated unique identifiers for the questionnaires.',
    )


class GetPciQuestionnaireResponse(BaseModel):
    content: Optional[str] = Field(
        None, description='The generated questionnaire in a base64 encoded format.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='The date the questionnaire was created, in ISO 8601 extended format. For example, 2022-12-18T10:15:30+01:00',
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the signed questionnaire.'
    )
    validUntil: Optional[datetime] = Field(
        None,
        description='The expiration date of the questionnaire, in ISO 8601 extended format. For example, 2022-12-18T10:15:30+01:00',
    )


class Type9(Enum):
    adyenAccount = 'adyenAccount'
    adyenCapital = 'adyenCapital'
    adyenCard = 'adyenCard'
    adyenForPlatformsAdvanced = 'adyenForPlatformsAdvanced'
    adyenForPlatformsManage = 'adyenForPlatformsManage'
    adyenFranchisee = 'adyenFranchisee'
    adyenIssuing = 'adyenIssuing'


class GetTermsOfServiceDocumentRequest(BaseModel):
    language: Optional[str] = Field(
        None,
        description='The language to be used for the Terms of Service document, specified by the two letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code. For example, **nl** for Dutch.',
    )
    type: Optional[Type9] = Field(None, description='The type of Terms of Service.')


class GetTermsOfServiceDocumentResponse(BaseModel):
    document: Optional[str] = Field(
        None, description='The Terms of Service document in Base64-encoded format.'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the legal entity.'
    )
    language: Optional[str] = Field(
        None,
        description='The language used for the Terms of Service document, specified by the two letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code. For example, **nl** for Dutch.',
    )
    termsOfServiceDocumentId: Optional[str] = Field(
        None, description='The unique identifier of the Terms of Service document.'
    )
    type: Optional[Type9] = Field(None, description='The type of Terms of Service.')


class Type11(Enum):
    huLocal = 'huLocal'


class HULocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=24, max_length=24) = Field(
        ...,
        description='The 24-digit bank account number, without separators or whitespace.',
    )
    type: Type11 = Field(..., description='**huLocal**')


class Type12(Enum):
    iban = 'iban'


class IbanAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    iban: str = Field(
        ...,
        description='The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.',
    )
    type: Type12 = Field(..., description='**iban**')


class Type13(Enum):
    bankStatement = 'bankStatement'
    driversLicense = 'driversLicense'
    identityCard = 'identityCard'
    nationalIdNumber = 'nationalIdNumber'
    passport = 'passport'
    proofOfAddress = 'proofOfAddress'
    proofOfNationalIdNumber = 'proofOfNationalIdNumber'
    proofOfResidency = 'proofOfResidency'
    registrationDocument = 'registrationDocument'
    vatDocument = 'vatDocument'
    proofOfOrganizationTaxInfo = 'proofOfOrganizationTaxInfo'
    proofOfIndustry = 'proofOfIndustry'
    constitutionalDocument = 'constitutionalDocument'


class IdentificationData(BaseModel):
    cardNumber: Optional[str] = Field(
        None, description='The card number of the document that was issued (AU only).'
    )
    expiryDate: Optional[str] = Field(
        None, description='The expiry date of the document, in YYYY-MM-DD format.'
    )
    issuerCountry: Optional[str] = Field(
        None,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.',
    )
    issuerState: Optional[str] = Field(
        None,
        description='The state or province where the document was issued (AU only).',
    )
    nationalIdExempt: Optional[bool] = Field(
        None,
        description='Applies only to individuals in the US. Set to **true** if the individual does not have an SSN. To verify their identity, Adyen will require them to upload an ID document.',
    )
    number: Optional[str] = Field(None, description='The number in the document.')
    type: Type13 = Field(
        ...,
        description='Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.\n\nWhen providing ID numbers:\n* For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.\n\nWhen uploading photo IDs:\n* For **individual**, the `type` values can be **identityCard**, **driversLicense**, or **passport**.\n\nWhen uploading other documents:\n* For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, or **proofOfIndustry**. \n\n* For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, or **proofOfIndividualTaxId**.\n\n* For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.\n\n* Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).',
    )


class Type14(Enum):
    individual = 'individual'
    organization = 'organization'
    soleProprietorship = 'soleProprietorship'
    trust = 'trust'
    unincorporatedPartnership = 'unincorporatedPartnership'


class Type15(Enum):
    pciSignatory = 'pciSignatory'
    signatory = 'signatory'
    soleProprietorship = 'soleProprietorship'
    uboThroughControl = 'uboThroughControl'
    uboThroughOwnership = 'uboThroughOwnership'
    ultimateParentCompany = 'ultimateParentCompany'


class LegalEntityAssociation(BaseModel):
    associatorId: Optional[str] = Field(
        None,
        description='The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.',
    )
    entityType: Optional[str] = Field(
        None,
        description='The legal entity type of associated legal entity. \n\nFor example, **organization**, **soleProprietorship** or **individual**. ',
    )
    jobTitle: Optional[str] = Field(
        None,
        description="The individual's job title if the `type` is **uboThroughControl** or **signatory**.",
    )
    legalEntityId: str = Field(
        ...,
        description='The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).\n\n- For **individual**, `name.firstName` and `name.lastName`.\n- For **organization**, `legalName`.\n- For **soleProprietorship**, `name`.',
    )
    type: Type15 = Field(
        ...,
        description='Defines the relationship of the legal entity to the current legal entity. \n\nPossible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **signatory**, or **ultimateParentCompany**. \n\nPossible values for sole proprietorships: **soleProprietorship**. ',
    )


class AllowedLevel(Enum):
    high = 'high'
    low = 'low'
    medium = 'medium'
    notApplicable = 'notApplicable'


class RequestedLevel(Enum):
    high = 'high'
    low = 'low'
    medium = 'medium'
    notApplicable = 'notApplicable'


class Type16(Enum):
    individual = 'individual'
    organization = 'organization'
    soleProprietorship = 'soleProprietorship'
    trust = 'trust'
    unincorporatedPartnership = 'unincorporatedPartnership'


class Type18(Enum):
    noLocal = 'noLocal'


class NOLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=11, max_length=11) = Field(
        ...,
        description='The 11-digit bank account number, without separators or whitespace.',
    )
    type: Type18 = Field(..., description='**noLocal**')


class Name(BaseModel):
    firstName: str = Field(..., description="The individual's first name.")
    infix: Optional[str] = Field(
        None, description="The infix in the individual's name, if any."
    )
    lastName: str = Field(..., description="The individual's last name.")


class Type19(Enum):
    numberAndBic = 'numberAndBic'


class NumberAndBicAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(max_length=34) = Field(
        ...,
        description='The bank account number, without separators or whitespace. The length and format depends on the bank or country.',
    )
    additionalBankIdentification: Optional[AdditionalBankIdentification] = Field(
        None,
        description='Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers.',
    )
    bic: constr(min_length=8, max_length=11) = Field(
        ..., description="The bank's 8- or 11-character BIC or SWIFT code."
    )
    type: Type19 = Field(..., description='**numberAndBic**')


class OnboardingLink(BaseModel):
    url: Optional[str] = Field(
        None,
        description='The URL of the hosted onboarding page where you need to redirect your user. This URL expires after 4 minutes and can only be used once.\n\nIf the link expires, you need to create a new link.',
    )


class OnboardingLinkInfo(BaseModel):
    locale: Optional[str] = Field(
        None,
        description='The language that will be used for the page, specified by a combination of two letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. See [possible values](https://docs.adyen.com/marketplaces-and-platforms/collect-verification-details/hosted#supported-languages). \n\nIf not specified in the request or if the language is not supported, the page uses the browser language. If the browser language is not supported, the page uses **en-US** by default.',
    )
    redirectUrl: Optional[str] = Field(
        None,
        description='The URL where the user is redirected after they complete hosted onboarding.',
    )
    settings: Optional[Dict[str, bool]] = Field(
        None,
        description="Boolean key-value pairs indicating the settings for the hosted onboarding page. The keys are the settings. By default, the values are set to **true**. Set to **false** to not allow the action.\n\nPossible keys:\n\n- **changeLegalEntityType**: The user can change their legal entity type.\n\n- **editPrefilledCountry**: The user can change the country of their legal entity's address, for example the registered address of an organization.\n\n",
    )
    themeId: Optional[str] = Field(
        None, description='The unique identifier of the hosted onboarding theme.'
    )


class OnboardingTheme(BaseModel):
    createdAt: datetime = Field(..., description='The creation date of the theme.')
    description: Optional[str] = Field(
        None, description='The description of the theme.'
    )
    id: str = Field(..., description='The unique identifier of the theme.')
    properties: Dict[str, str] = Field(..., description='The properties of the theme.')
    updatedAt: Optional[datetime] = Field(
        None, description='The date when the theme was last updated.'
    )


class OnboardingThemes(BaseModel):
    next: Optional[str] = Field(
        None, description='The next page. Only present if there is a next page.'
    )
    previous: Optional[str] = Field(
        None, description='The previous page. Only present if there is a previous page.'
    )
    themes: List[OnboardingTheme] = Field(..., description='List of onboarding themes.')


class Type20(Enum):
    associationIncorporated = 'associationIncorporated'
    governmentalOrganization = 'governmentalOrganization'
    listedPublicCompany = 'listedPublicCompany'
    nonProfit = 'nonProfit'
    partnershipIncorporated = 'partnershipIncorporated'
    privateCompany = 'privateCompany'


class VatAbsenceReason(Enum):
    industryExemption = 'industryExemption'
    belowTaxThreshold = 'belowTaxThreshold'


class OwnerEntity(BaseModel):
    id: str = Field(
        ...,
        description='Unique identifier of the resource that owns the document. For `type` **legalEntity**, this value is the unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id). For `type` **bankAccount**, this value is the unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments#responses-200-id).',
    )
    type: str = Field(
        ...,
        description='Type of resource that owns the document.\n\nPossible values: **legalEntity**, **bankAccount**.',
    )


class Type21(Enum):
    plLocal = 'plLocal'


class PLLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=26, max_length=26) = Field(
        ...,
        description='The 26-digit bank account number ([Numer rachunku](https://pl.wikipedia.org/wiki/Numer_Rachunku_Bankowego)), without separators or whitespace.',
    )
    type: Type21 = Field(..., description='**plLocal**')


class PciDocumentInfo(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='The date the questionnaire was created, in ISO 8601 extended format. For example, 2022-12-18T10:15:30+01:00',
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the signed questionnaire.'
    )
    validUntil: Optional[datetime] = Field(
        None,
        description='The expiration date of the questionnaire, in ISO 8601 extended format. For example, 2022-12-18T10:15:30+01:00',
    )


class PciSigningRequest(BaseModel):
    pciTemplateReferences: List[str] = Field(
        ...,
        description='The array of Adyen-generated unique identifiers for the questionnaires.',
    )
    signedBy: str = Field(
        ...,
        description='The [legal entity ID](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) of the individual who signs the PCI questionnaire.',
    )


class PciSigningResponse(BaseModel):
    pciQuestionnaireIds: Optional[List[str]] = Field(
        None, description='The unique identifiers of the signed PCI documents.'
    )
    signedBy: Optional[str] = Field(
        None,
        description='The [legal entity ID](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) of the individual who signed the PCI questionnaire.',
    )


class PhoneNumber(BaseModel):
    number: str = Field(
        ...,
        description='The full phone number, including the country code. For example, **+3112345678**.',
    )
    type: Optional[str] = Field(
        None,
        description='The type of phone number.\n Possible values: **mobile**, **landline**, **sip**, **fax.** ',
    )


class RemediatingAction(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None


class Type22(Enum):
    seLocal = 'seLocal'


class SELocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=7, max_length=10) = Field(
        ...,
        description='The 7- to 10-digit bank account number ([Bankkontonummer](https://sv.wikipedia.org/wiki/Bankkonto)), without the clearing number, separators, or whitespace.',
    )
    clearingNumber: constr(min_length=4, max_length=5) = Field(
        ...,
        description='The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.',
    )
    type: Type22 = Field(..., description='**seLocal**')


class ServiceError(BaseModel):
    errorCode: Optional[str] = Field(
        None, description='The error code mapped to the error message.'
    )
    errorType: Optional[str] = Field(None, description='The category of the error.')
    message: Optional[str] = Field(
        None, description='A short explanation of the issue.'
    )
    pspReference: Optional[str] = Field(
        None, description='The PSP reference of the payment.'
    )
    status: Optional[int] = Field(None, description='The HTTP response status.')


class SoleProprietorship(BaseModel):
    countryOfGoverningLaw: str = Field(
        ...,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.',
    )
    dateOfIncorporation: Optional[str] = Field(
        None,
        description='The date when the legal arrangement was incorporated in YYYY-MM-DD format.',
    )
    doingBusinessAs: Optional[str] = Field(
        None, description='The registered name, if different from the `name`.'
    )
    name: str = Field(..., description='The legal name.')
    principalPlaceOfBusiness: Optional[Address] = Field(
        None,
        description='The business address. Required if the principal place of business is different from the `registeredAddress`.',
    )
    registeredAddress: Address = Field(
        ...,
        description='The address registered at the registrar, such as the Chamber of Commerce.',
    )
    registrationNumber: Optional[str] = Field(
        None, description='The registration number.'
    )
    vatAbsenceReason: Optional[VatAbsenceReason] = Field(
        None,
        description='The reason for not providing a VAT number.\n\nPossible values: **industryExemption**, **belowTaxThreshold**.',
    )
    vatNumber: Optional[str] = Field(None, description='The VAT number.')


class Type23(Enum):
    business = 'business'


class SourceOfFunds(BaseModel):
    acquiringBusinessLineId: Optional[str] = Field(
        None,
        description='The unique identifier of the business line that will be the source of funds.This must be a business line for a **receivePayments** or **receiveFromPlatformPayments** capability.',
    )
    adyenProcessedFunds: Optional[bool] = Field(
        None,
        description='Indicates whether the funds are coming from transactions processed by Adyen. If **false**, a `description` is required.',
    )
    description: Optional[str] = Field(
        None,
        description='Text describing the source of funds. For example, for `type` **business**, provide a description of where the business transactions come from, such as payments through bank transfer. Required when `adyenProcessedFunds` is **false**.',
    )
    type: Optional[Type23] = Field(
        None,
        description='The type of the source of funds. Possible value: **business**.',
    )


class StockData(BaseModel):
    marketIdentifier: Optional[str] = Field(
        None,
        description="The four-digit [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) of the stock market where the organization's stocks are traded.",
    )
    stockNumber: Optional[str] = Field(
        None,
        description='The 12-digit International Securities Identification Number (ISIN) of the company, without dashes (-).',
    )
    tickerSymbol: Optional[str] = Field(None, description='The stock ticker symbol.')


class SupportingEntityCapability(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether the supporting entity capability is allowed.\n\nIf a supporting entity is allowed but its parent legal entity is not, it means there are other supporting entities that failed validation.\n\n**The allowed supporting entity can still be used**',
    )
    id: Optional[str] = Field(None, description='Supporting entity reference ')
    requested: Optional[bool] = Field(
        None,
        description='Indicates whether the supporting entity capability is requested. ',
    )
    verificationStatus: Optional[str] = Field(
        None,
        description='The status of the verification checks for the supporting entity capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n',
    )


class TaxInformation(BaseModel):
    country: Optional[constr(min_length=2, max_length=2)] = Field(
        None,
        description='The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.',
    )
    number: Optional[str] = Field(
        None, description='The tax ID number (TIN) of the organization or individual.'
    )
    type: Optional[str] = Field(
        None,
        description='The TIN type depending on the country where it was issued. Provide only for countries that have multiple tax IDs, such as Sweden, the UK, or the US. For example, provide **SSN**, **EIN**, or **ITIN** for the US.',
    )


class BusinessType(Enum):
    other = 'other'
    listedPublicCompany = 'listedPublicCompany'
    subsidiaryOfListedPublicCompany = 'subsidiaryOfListedPublicCompany'
    governmentalOrganization = 'governmentalOrganization'
    internationalOrganization = 'internationalOrganization'
    financialInstitution_ = 'financialInstitution.'


class MainSourceOfIncome(Enum):
    businessOperation = 'businessOperation'
    realEstateSales = 'realEstateSales'
    investmentInterestOrRoyalty = 'investmentInterestOrRoyalty'
    propertyRental = 'propertyRental'
    other = 'other'


class Type24(Enum):
    nonFinancialNonReportable = 'nonFinancialNonReportable'
    financialNonReportable = 'financialNonReportable'
    nonFinancialActive = 'nonFinancialActive'
    nonFinancialPassive = 'nonFinancialPassive'


class TaxReportingClassification(BaseModel):
    businessType: Optional[BusinessType] = Field(
        None,
        description="The organization's business type.\n\nPossible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.",
    )
    financialInstitutionNumber: Optional[str] = Field(
        None,
        description='The Global Intermediary Identification Number (GIIN) required for FATCA.',
    )
    mainSourceOfIncome: Optional[MainSourceOfIncome] = Field(
        None,
        description="The organization's main source of income.\n\nPossible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.",
    )
    type: Optional[Type24] = Field(
        None,
        description='The tax reporting classification type.\n\nPossible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.',
    )


class Type25(Enum):
    adyenAccount = 'adyenAccount'
    adyenCapital = 'adyenCapital'
    adyenCard = 'adyenCard'
    adyenForPlatformsAdvanced = 'adyenForPlatformsAdvanced'
    adyenForPlatformsManage = 'adyenForPlatformsManage'
    adyenFranchisee = 'adyenFranchisee'
    adyenIssuing = 'adyenIssuing'


class TermsOfServiceAcceptanceInfo(BaseModel):
    acceptedBy: Optional[str] = Field(
        None,
        description='The unique identifier of the user that accepted the Terms of Service.',
    )
    acceptedFor: Optional[str] = Field(
        None,
        description='The unique identifier of the legal entity for which the Terms of Service are accepted.',
    )
    createdAt: Optional[datetime] = Field(
        None, description='The date when the Terms of Service were accepted.'
    )
    id: Optional[str] = Field(
        None,
        description='An Adyen-generated reference for the accepted Terms of Service.',
    )
    type: Optional[Type25] = Field(None, description='The type of Terms of Service.')


class Type26(Enum):
    bankAccount = 'bankAccount'
    recurringDetail = 'recurringDetail'


class TransferInstrumentReference(BaseModel):
    accountIdentifier: str = Field(
        ..., description='The masked IBAN or bank account number.'
    )
    id: str = Field(..., description='The unique identifier of the resource.')
    realLastFour: Optional[str] = Field(
        None, description='Four last digits of the bank account number.'
    )


class Type28(Enum):
    ukLocal = 'ukLocal'


class UKLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=8, max_length=8) = Field(
        ...,
        description='The 8-digit bank account number, without separators or whitespace.',
    )
    sortCode: constr(min_length=6, max_length=6) = Field(
        ...,
        description='The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.',
    )
    type: Type28 = Field(..., description='**ukLocal**')


class Type29(Enum):
    usLocal = 'usLocal'


class USLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=2, max_length=18) = Field(
        ..., description='The bank account number, without separators or whitespace.'
    )
    accountType: Optional[AccountType] = Field(
        'checking',
        description='The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.',
    )
    routingNumber: constr(min_length=9, max_length=9) = Field(
        ...,
        description='The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.',
    )
    type: Type29 = Field(..., description='**usLocal**')


class Capability(Enum):
    acceptExternalFunding = 'acceptExternalFunding'
    acceptPspFunding = 'acceptPspFunding'
    acceptTransactionInRestrictedCountries = 'acceptTransactionInRestrictedCountries'
    acceptTransactionInRestrictedCountriesCommercial = (
        'acceptTransactionInRestrictedCountriesCommercial'
    )
    acceptTransactionInRestrictedCountriesConsumer = (
        'acceptTransactionInRestrictedCountriesConsumer'
    )
    acceptTransactionInRestrictedIndustries = 'acceptTransactionInRestrictedIndustries'
    acceptTransactionInRestrictedIndustriesCommercial = (
        'acceptTransactionInRestrictedIndustriesCommercial'
    )
    acceptTransactionInRestrictedIndustriesConsumer = (
        'acceptTransactionInRestrictedIndustriesConsumer'
    )
    acquiring = 'acquiring'
    atmWithdrawal = 'atmWithdrawal'
    atmWithdrawalCommercial = 'atmWithdrawalCommercial'
    atmWithdrawalConsumer = 'atmWithdrawalConsumer'
    atmWithdrawalInRestrictedCountries = 'atmWithdrawalInRestrictedCountries'
    atmWithdrawalInRestrictedCountriesCommercial = (
        'atmWithdrawalInRestrictedCountriesCommercial'
    )
    atmWithdrawalInRestrictedCountriesConsumer = (
        'atmWithdrawalInRestrictedCountriesConsumer'
    )
    authorisedPaymentInstrumentUser = 'authorisedPaymentInstrumentUser'
    getGrantOffers = 'getGrantOffers'
    issueBankAccount = 'issueBankAccount'
    issueCard = 'issueCard'
    issueCardCommercial = 'issueCardCommercial'
    issueCardConsumer = 'issueCardConsumer'
    localAcceptance = 'localAcceptance'
    payout = 'payout'
    payoutToTransferInstrument = 'payoutToTransferInstrument'
    processing = 'processing'
    receiveFromBalanceAccount = 'receiveFromBalanceAccount'
    receiveFromPlatformPayments = 'receiveFromPlatformPayments'
    receiveFromThirdParty = 'receiveFromThirdParty'
    receiveFromTransferInstrument = 'receiveFromTransferInstrument'
    receiveGrants = 'receiveGrants'
    receivePayments = 'receivePayments'
    sendToBalanceAccount = 'sendToBalanceAccount'
    sendToThirdParty = 'sendToThirdParty'
    sendToTransferInstrument = 'sendToTransferInstrument'
    thirdPartyFunding = 'thirdPartyFunding'
    useCard = 'useCard'
    useCardCommercial = 'useCardCommercial'
    useCardConsumer = 'useCardConsumer'
    useCardInRestrictedCountries = 'useCardInRestrictedCountries'
    useCardInRestrictedCountriesCommercial = 'useCardInRestrictedCountriesCommercial'
    useCardInRestrictedCountriesConsumer = 'useCardInRestrictedCountriesConsumer'
    useCardInRestrictedIndustries = 'useCardInRestrictedIndustries'
    useCardInRestrictedIndustriesCommercial = 'useCardInRestrictedIndustriesCommercial'
    useCardInRestrictedIndustriesConsumer = 'useCardInRestrictedIndustriesConsumer'
    withdrawFromAtm = 'withdrawFromAtm'
    withdrawFromAtmCommercial = 'withdrawFromAtmCommercial'
    withdrawFromAtmConsumer = 'withdrawFromAtmConsumer'
    withdrawFromAtmInRestrictedCountries = 'withdrawFromAtmInRestrictedCountries'
    withdrawFromAtmInRestrictedCountriesCommercial = (
        'withdrawFromAtmInRestrictedCountriesCommercial'
    )
    withdrawFromAtmInRestrictedCountriesConsumer = (
        'withdrawFromAtmInRestrictedCountriesConsumer'
    )


class Type30(Enum):
    dataMissing = 'dataMissing'
    invalidInput = 'invalidInput'
    pendingStatus = 'pendingStatus'


class VerificationErrorRecursive(BaseModel):
    capabilities: Optional[List[Capability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.',
    )
    code: Optional[str] = Field(None, description='The general error code.')
    message: Optional[str] = Field(None, description='The general error message.')
    remediatingActions: Optional[List[RemediatingAction]] = Field(
        None,
        description='An object containing possible solutions to fix a verification error.',
    )
    type: Optional[Type30] = Field(None, description='The type of error.')


class Void(BaseModel):
    pass


class VoidResponse(BaseModel):
    pass


class WebData(BaseModel):
    webAddress: Optional[str] = Field(
        None, description='The URL of the website or the app store URL.'
    )
    webAddressId: Optional[str] = Field(
        None, description='The unique identifier of the web address.'
    )


class Reason(Enum):
    noOnlinePresence = 'noOnlinePresence'


class WebDataExemption(BaseModel):
    reason: Optional[Reason] = Field(
        None,
        description='The reason why the web data was not provided. Possible value: **noOnlinePresence**.',
    )


class BankAccountInfo(BaseModel):
    accountIdentification: Optional[
        Union[
            AULocalAccountIdentification,
            CALocalAccountIdentification,
            CZLocalAccountIdentification,
            DKLocalAccountIdentification,
            HULocalAccountIdentification,
            IbanAccountIdentification,
            NOLocalAccountIdentification,
            NumberAndBicAccountIdentification,
            PLLocalAccountIdentification,
            SELocalAccountIdentification,
            UKLocalAccountIdentification,
            USLocalAccountIdentification,
        ]
    ] = Field(None, description='Identification of the bank account.')
    accountType: Optional[str] = Field(None, description='The type of bank account.')
    countryCode: Optional[str] = Field(
        None,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.',
    )


class BusinessLineInfo(BaseModel):
    capability: Optional[str] = Field(
        None,
        description='The capability for which you are creating the business line. For example, **receivePayments**.',
    )
    industryCode: str = Field(
        ...,
        description='A code that represents the industry of the legal entity. For example, **4431A** for computer software stores.',
    )
    legalEntityId: str = Field(
        ...,
        description='Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.',
    )
    salesChannels: Optional[List[str]] = Field(
        None,
        description='A list of channels where goods or services are sold.\n\nPossible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.\n\nRequired only in combination with the `service` **paymentProcessing**.',
    )
    service: Service = Field(
        ...,
        description='The service for which you are creating the business line.\n\nPossible values:**paymentProcessing**, **issuing**, **banking**',
    )
    sourceOfFunds: Optional[SourceOfFunds] = Field(
        None,
        description="Contains information about the source of your user's funds. Required only for the `service` **banking**.",
    )
    webData: Optional[List[WebData]] = Field(
        None,
        description="List of website URLs where your user's goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.",
    )
    webDataExemption: Optional[WebDataExemption] = Field(
        None, description='The reason why the web data is not provided.'
    )


class BusinessLineInfoUpdate(BaseModel):
    capability: Optional[str] = Field(
        None,
        description='The capability for which you are creating the business line. For example, **receivePayments**.',
    )
    industryCode: Optional[str] = Field(
        None,
        description='A code that represents the industry of your legal entity. For example, **4431A** for computer software stores.',
    )
    legalEntityId: Optional[str] = Field(
        None,
        description='Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.',
    )
    salesChannels: Optional[List[str]] = Field(
        None,
        description='A list of channels where goods or services are sold.\n\nPossible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.\n\nRequired only in combination with the `service` **paymentProcessing**.',
    )
    service: Service = Field(
        ...,
        description='The service for which you are creating the business line.\n\nPossible values:**paymentProcessing**, **issuing**, **banking**',
    )
    sourceOfFunds: Optional[SourceOfFunds] = Field(
        None,
        description="Contains information about the source of your user's funds. Required only for the `service` **banking**.",
    )
    webData: Optional[List[WebData]] = Field(
        None,
        description="List of website URLs where your user's goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.",
    )
    webDataExemption: Optional[WebDataExemption] = Field(
        None, description='The reason why the web data is not provided.'
    )


class CapabilityProblemEntity(BaseModel):
    documents: Optional[List[str]] = None
    id: Optional[str] = None
    owner: Optional[CapabilityProblemEntityRecursive] = None
    type: Optional[Type5] = None


class Document(BaseModel):
    attachment: Optional[Attachment] = Field(
        None, description='Object that contains the document.'
    )
    attachments: List[Attachment] = Field(
        ...,
        description='Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document.',
    )
    creationDate: Optional[datetime] = Field(
        None, description='The creation date of the document.'
    )
    description: str = Field(..., description='Your description for the document.')
    expiryDate: Optional[str] = Field(
        None, description='The expiry date of the document, in YYYY-MM-DD format.'
    )
    fileName: Optional[str] = Field(None, description='The filename of the document.')
    id: Optional[str] = Field(
        None, description='The unique identifier of the document.'
    )
    issuerCountry: Optional[str] = Field(
        None,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.',
    )
    issuerState: Optional[str] = Field(
        None,
        description='The state or province where the document was issued (AU only).',
    )
    modificationDate: Optional[datetime] = Field(
        None, description='The modification date of the document.'
    )
    number: Optional[str] = Field(None, description='The number in the document.')
    owner: OwnerEntity = Field(
        ...,
        description='Contains information about the resource that owns the document.',
    )
    type: Type8 = Field(
        ...,
        description='Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.\n\nWhen providing ID numbers:\n* For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.\n\nWhen uploading photo IDs:\n* For **individual**, the `type` values can be **identityCard**, **driversLicense**, or **passport**.\n\nWhen uploading other documents:\n* For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, or **proofOfIndustry**. \n\n* For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, or **proofOfIndividualTaxId**.\n\n* For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.\n\n* Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).',
    )


class GetPciQuestionnaireInfosResponse(BaseModel):
    data: Optional[List[PciDocumentInfo]] = Field(
        None, description='Information about the signed PCI questionnaires.'
    )


class GetTermsOfServiceAcceptanceInfosResponse(BaseModel):
    data: Optional[List[TermsOfServiceAcceptanceInfo]] = Field(
        None, description='The Terms of Service acceptance information.'
    )


class Individual(BaseModel):
    birthData: Optional[BirthData] = Field(
        None, description="The individual's birth information."
    )
    email: Optional[str] = Field(
        None, description='The email address of the legal entity.'
    )
    identificationData: Optional[IdentificationData] = Field(
        None, description="Information about the individual's identification document."
    )
    name: Name = Field(..., description="The individual's name.")
    nationality: Optional[str] = Field(
        None, description="The individual's nationality."
    )
    phone: Optional[PhoneNumber] = Field(
        None, description='The phone number of the legal entity.'
    )
    residentialAddress: Address = Field(
        ..., description='The residential address of the individual.'
    )
    taxInformation: Optional[List[TaxInformation]] = Field(
        None, description='The tax information of the individual.'
    )
    webData: Optional[WebData] = Field(
        None, description='The website and app URL of the legal entity.'
    )


class LegalEntityCapability(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful ',
    )
    allowedLevel: Optional[AllowedLevel] = Field(
        None,
        description='The capability level that is allowed for the legal entity.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    allowedSettings: Optional[CapabilitySettings] = Field(
        None, description='The settings that were allowed for the Legal Entity.'
    )
    requested: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is requested. To check whether the Legal Entity is permitted to use the capability, ',
    )
    requestedLevel: Optional[RequestedLevel] = Field(
        None,
        description='The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    requestedSettings: Optional[CapabilitySettings] = Field(
        None, description='The settings that are requested for the Legal Entity.'
    )
    transferInstruments: Optional[List[SupportingEntityCapability]] = Field(
        None,
        description='Capability status for transfer instruments associated with legal entity',
    )
    verificationStatus: Optional[str] = Field(
        None,
        description='The status of the verification checks for the capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n',
    )


class Organization(BaseModel):
    dateOfIncorporation: Optional[str] = Field(
        None,
        description='The date when the organization was incorporated in YYYY-MM-DD format.',
    )
    description: Optional[str] = Field(
        None, description='Your description for the organization.'
    )
    doingBusinessAs: Optional[str] = Field(
        None,
        description="The organization's trading name, if different from the registered legal name.",
    )
    email: Optional[str] = Field(
        None, description='The email address of the legal entity.'
    )
    legalName: str = Field(..., description="The organization's legal name.")
    phone: Optional[PhoneNumber] = Field(
        None, description='The phone number of the legal entity.'
    )
    principalPlaceOfBusiness: Optional[Address] = Field(
        None,
        description='The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.',
    )
    registeredAddress: Address = Field(
        ...,
        description='The address of the organization registered at their registrar (such as the Chamber of Commerce).',
    )
    registrationNumber: Optional[str] = Field(
        None, description="The organization's registration number."
    )
    stockData: Optional[StockData] = Field(
        None,
        description="Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.",
    )
    taxInformation: Optional[List[TaxInformation]] = Field(
        None, description='The tax information of the organization.'
    )
    taxReportingClassification: Optional[TaxReportingClassification] = Field(
        None,
        description='The tax reporting classification (FATCA/CRS self-certification) of the organization.',
    )
    type: Optional[Type20] = Field(
        None,
        description='Type of organization. \n\nPossible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.',
    )
    vatAbsenceReason: Optional[VatAbsenceReason] = Field(
        None,
        description='The reason the organization has not provided a VAT number.\n\nPossible values: **industryExemption**, **belowTaxThreshold**.',
    )
    vatNumber: Optional[str] = Field(None, description="The organization's VAT number.")
    webData: Optional[WebData] = Field(
        None, description='The website and app URL of the legal entity.'
    )


class TransferInstrumentInfo(BaseModel):
    bankAccount: BankAccountInfo = Field(
        ..., description="Contains information about the legal entity's bank account."
    )
    legalEntityId: str = Field(
        ...,
        description='The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) that owns the transfer instrument.',
    )
    type: Type26 = Field(
        ...,
        description='The type of transfer instrument.\n\nPossible value: **bankAccount**.',
    )


class VerificationError(BaseModel):
    capabilities: Optional[List[Capability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.',
    )
    code: Optional[str] = Field(None, description='The general error code.')
    message: Optional[str] = Field(None, description='The general error message.')
    remediatingActions: Optional[List[RemediatingAction]] = Field(
        None,
        description='An object containing possible solutions to fix a verification error.',
    )
    subErrors: Optional[List[VerificationErrorRecursive]] = Field(
        None,
        description='An array containing more granular information about the cause of the verification error.',
    )
    type: Optional[Type30] = Field(None, description='The type of error.')


class CapabilityProblem(BaseModel):
    entity: Optional[CapabilityProblemEntity] = None
    verificationErrors: Optional[List[VerificationError]] = None


class LegalEntity(BaseModel):
    capabilities: Optional[Dict[str, LegalEntityCapability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.',
    )
    documentDetails: Optional[List[DocumentReference]] = Field(
        None, description='List of documents uploaded for the legal entity.'
    )
    documents: Optional[List[EntityReference]] = Field(
        None, description='List of documents uploaded for the legal entity.'
    )
    entityAssociations: Optional[List[LegalEntityAssociation]] = Field(
        None,
        description='List of legal entities associated with the current legal entity.\nFor example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.',
    )
    id: str = Field(..., description='The unique identifier of the legal entity.')
    individual: Optional[Individual] = Field(
        None,
        description='Information about the individual. Required if `type` is **individual**.',
    )
    organization: Optional[Organization] = Field(
        None,
        description='Information about the organization. Required if `type` is **organization**.',
    )
    problems: Optional[List[CapabilityProblem]] = Field(
        None,
        description='List of the verification errors from capabilities for the legal entity.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None, description='Your reference for the legal entity, maximum 150 characters.'
    )
    soleProprietorship: Optional[SoleProprietorship] = Field(
        None,
        description='Information about the sole proprietorship. Required if `type` is **soleProprietorship**.',
    )
    transferInstruments: Optional[List[TransferInstrumentReference]] = Field(
        None, description='List of transfer instruments that the legal entity owns.'
    )
    type: Optional[Type14] = Field(
        None,
        description='The type of legal entity.\n\n Possible values: **individual**, **organization**, or **soleProprietorship**.',
    )


class LegalEntityInfo(BaseModel):
    capabilities: Optional[Dict[str, LegalEntityCapability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.',
    )
    entityAssociations: Optional[List[LegalEntityAssociation]] = Field(
        None,
        description='List of legal entities associated with the current legal entity.\nFor example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.',
    )
    individual: Optional[Individual] = Field(
        None,
        description='Information about the individual. Required if `type` is **individual**.',
    )
    organization: Optional[Organization] = Field(
        None,
        description='Information about the organization. Required if `type` is **organization**.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None, description='Your reference for the legal entity, maximum 150 characters.'
    )
    soleProprietorship: Optional[SoleProprietorship] = Field(
        None,
        description='Information about the sole proprietorship. Required if `type` is **soleProprietorship**.',
    )
    type: Optional[Type16] = Field(
        None,
        description='The type of legal entity.\n\n Possible values: **individual**, **organization**, or **soleProprietorship**.',
    )


class LegalEntityInfoRequiredType(BaseModel):
    capabilities: Optional[Dict[str, LegalEntityCapability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.',
    )
    entityAssociations: Optional[List[LegalEntityAssociation]] = Field(
        None,
        description='List of legal entities associated with the current legal entity.\nFor example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.',
    )
    individual: Optional[Individual] = Field(
        None,
        description='Information about the individual. Required if `type` is **individual**.',
    )
    organization: Optional[Organization] = Field(
        None,
        description='Information about the organization. Required if `type` is **organization**.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None, description='Your reference for the legal entity, maximum 150 characters.'
    )
    soleProprietorship: Optional[SoleProprietorship] = Field(
        None,
        description='Information about the sole proprietorship. Required if `type` is **soleProprietorship**.',
    )
    type: Type16 = Field(
        ...,
        description='The type of legal entity.\n\n Possible values: **individual**, **organization**, or **soleProprietorship**.',
    )


class TransferInstrument(BaseModel):
    bankAccount: BankAccountInfo = Field(
        ..., description="Contains information about the legal entity's bank account."
    )
    capabilities: Optional[Dict[str, SupportingEntityCapability]] = Field(
        None, description='List of capabilities for this supporting entity.'
    )
    documentDetails: Optional[List[DocumentReference]] = Field(
        None, description='List of documents uploaded for the transfer instrument.'
    )
    id: str = Field(
        ..., description='The unique identifier of the transfer instrument.'
    )
    legalEntityId: str = Field(
        ...,
        description='The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) that owns the transfer instrument.',
    )
    problems: Optional[List[CapabilityProblem]] = Field(
        None,
        description='List of the verification errors from capabilities for this supporting entity.',
    )
    type: Type26 = Field(
        ...,
        description='The type of transfer instrument.\n\nPossible value: **bankAccount**.',
    )


class VerificationErrors(BaseModel):
    problems: Optional[List[CapabilityProblem]] = Field(
        None, description='List of the verification errors.'
    )


class BusinessLine(BaseModel):
    capability: Optional[str] = Field(
        None,
        description='The capability for which you are creating the business line. For example, **receivePayments**.',
    )
    id: str = Field(..., description='The unique identifier of the business line.')
    industryCode: str = Field(
        ...,
        description='A code that represents the industry of the legal entity. For example, **4431A** for computer software stores.',
    )
    legalEntityId: str = Field(
        ...,
        description='Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.',
    )
    problems: Optional[List[CapabilityProblem]] = Field(
        None,
        description='List of the verification errors from capabilities for this supporting entity.',
    )
    salesChannels: Optional[List[str]] = Field(
        None,
        description='A list of channels where goods or services are sold.\n\nPossible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.\n\nRequired only in combination with the `service` **paymentProcessing**.',
    )
    service: Service = Field(
        ...,
        description='The service for which you are creating the business line.\n\nPossible values:**paymentProcessing**, **issuing**, **banking**',
    )
    sourceOfFunds: Optional[SourceOfFunds] = Field(
        None,
        description="Contains information about the source of your user's funds. Required only for the `service` **banking**.",
    )
    webData: Optional[List[WebData]] = Field(
        None,
        description="List of website URLs where your user's goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.",
    )
    webDataExemption: Optional[WebDataExemption] = Field(
        None, description='The reason why the web data is not provided.'
    )


class BusinessLines(BaseModel):
    businessLines: List[BusinessLine] = Field(
        ..., description='List of business lines.'
    )
