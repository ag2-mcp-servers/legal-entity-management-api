# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:03:45+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic

from models import (
    AcceptTermsOfServiceRequest,
    AcceptTermsOfServiceResponse,
    BusinessLine,
    BusinessLineInfo,
    BusinessLineInfoUpdate,
    BusinessLines,
    Document,
    GeneratePciDescriptionRequest,
    GeneratePciDescriptionResponse,
    GetPciQuestionnaireInfosResponse,
    GetPciQuestionnaireResponse,
    GetTermsOfServiceAcceptanceInfosResponse,
    GetTermsOfServiceDocumentRequest,
    GetTermsOfServiceDocumentResponse,
    LegalEntity,
    LegalEntityInfo,
    LegalEntityInfoRequiredType,
    OnboardingLink,
    OnboardingLinkInfo,
    OnboardingTheme,
    OnboardingThemes,
    PciSigningRequest,
    PciSigningResponse,
    ServiceError,
    TransferInstrument,
    TransferInstrumentInfo,
    VerificationErrors,
    VoidResponse,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='The Legal Entity Management API enables you to manage legal entities that contain information required for verification. \n## Authentication\nTo connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don\'t have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:\n\n```\ncurl\n-U "ws_123456@Scope.BalancePlatform_YourBalancePlatform":"YourWsPassword" \\\n-H "Content-Type: application/json" \\\n...\n```\nNote that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n## Versioning\nThe Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://kyc-test.adyen.com/lem/v3/legalEntities\n```\n## Going live\nWhen going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.\n\n',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='Legal Entity Management API',
    version='3',
    servers=[{'url': 'https://kyc-test.adyen.com/lem/v3'}],
)


@app.post(
    '/businessLines',
    description=""" Creates a business line. 

This resource contains information about your user's line of business, including their industry and their source of funds. Adyen uses this information to verify your users as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses. """,
    tags=['business_line_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_business_lines(body: BusinessLineInfo = None):
    """
    Create a business line
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/businessLines/{id}',
    description=""" Deletes a business line.

 >If you delete a business line linked to a [payment method](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api), it can affect your merchant account's ability to use the [payment method](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/_merchantId_/paymentMethodSettings). The business line is removed from all linked merchant accounts. """,
    tags=['business_line_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def delete_business_lines_id(id: str):
    """
    Delete a business line
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/businessLines/{id}',
    description=""" Returns the detail of a business line. """,
    tags=['business_line_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_business_lines_id(id: str):
    """
    Get a business line
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/businessLines/{id}',
    description=""" Updates a business line. """,
    tags=['business_line_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_business_lines_id(id: str, body: BusinessLineInfoUpdate = None):
    """
    Update a business line
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/documents',
    description=""" Uploads a document for verification checks.

 Adyen uses the information from the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities) to run automated verification checks. If these checks fail, you will be notified to provide additional documents.

 You should only upload documents when Adyen requests additional information for the legal entity.  """,
    tags=['document_verification_management', 'legal_entity_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_documents(body: Document = None):
    """
    Upload a document for verification checks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/documents/{id}',
    description=""" Deletes a document. """,
    tags=['document_verification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def delete_documents_id(id: str):
    """
    Delete a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents/{id}',
    description=""" Returns a document. """,
    tags=['document_verification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_documents_id(id: str):
    """
    Get a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/documents/{id}',
    description=""" Updates a document. """,
    tags=['document_verification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_documents_id(id: str, body: Document = None):
    """
    Update a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/legalEntities',
    description=""" Creates a legal entity. 

This resource contains information about the user that will be onboarded in your platform. Adyen uses this information to perform verification checks as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses. 

 """,
    tags=['legal_entity_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_legal_entities(body: LegalEntityInfoRequiredType = None):
    """
    Create a legal entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/legalEntities/{id}',
    description=""" Returns a legal entity. """,
    tags=['legal_entity_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_legal_entities_id(id: str):
    """
    Get a legal entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/legalEntities/{id}',
    description=""" Updates a legal entity.

 >To change the legal entity type, include only the new `type` in your request. To update the `entityAssociations` array, you need to replace the entire array. For example, if the array has 3 entries and you want to remove 1 entry, you need to PATCH the resource with the remaining 2 entries. """,
    tags=['legal_entity_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_legal_entities_id(id: str, body: LegalEntityInfo = None):
    """
    Update a legal entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/legalEntities/{id}/businessLines',
    description=""" Returns the business lines owned by a legal entity. """,
    tags=['business_line_handling', 'legal_entity_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_legal_entities_id_business_lines(id: str):
    """
    Get all business lines under a legal entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/legalEntities/{id}/checkVerificationErrors',
    description=""" Returns the verification errors for a legal entity and its supporting entities. """,
    tags=['legal_entity_operations', 'document_verification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_legal_entities_id_check_verification_errors(id: str):
    """
    Check a legal entity's verification errors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/legalEntities/{id}/onboardingLinks',
    description=""" Returns a link to an Adyen-hosted onboarding page where you need to redirect your user. """,
    tags=['legal_entity_operations', 'onboarding_theme_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_legal_entities_id_onboarding_links(id: str, body: OnboardingLinkInfo = None):
    """
    Get a link to an Adyen-hosted onboarding page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/legalEntities/{id}/pciQuestionnaires',
    description=""" Get a list of signed PCI questionnaires. """,
    tags=['pci_questionnaire_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_legal_entities_id_pci_questionnaires(id: str):
    """
    Get PCI questionnaire details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/legalEntities/{id}/pciQuestionnaires/generatePciTemplates',
    description=""" Generates the required PCI questionnaire based on the user's [salesChannel](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines__reqParam_salesChannels). If multiple questionnaires are required, this request creates a single consodilated document to be signed. """,
    tags=['pci_questionnaire_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_legal_entities_id_pci_questionnaires_generate_pci_templates(
    id: str, body: GeneratePciDescriptionRequest = None
):
    """
    Generate PCI questionnaire
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/legalEntities/{id}/pciQuestionnaires/signPciTemplates',
    description=""" Signs the required PCI questionnaire. """,
    tags=['pci_questionnaire_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_legal_entities_id_pci_questionnaires_sign_pci_templates(
    id: str, body: PciSigningRequest = None
):
    """
    Sign PCI questionnaire
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/legalEntities/{id}/pciQuestionnaires/{pciid}',
    description=""" Returns the signed PCI questionnaire. """,
    tags=['pci_questionnaire_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_legal_entities_id_pci_questionnaires_pciid(id: str, pciid: str = ...):
    """
    Get PCI questionnaire
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/legalEntities/{id}/termsOfService',
    description=""" Returns the Terms of Service document for a legal entity. """,
    tags=['terms_of_service_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_legal_entities_id_terms_of_service(
    id: str, body: GetTermsOfServiceDocumentRequest = None
):
    """
    Get Terms of Service document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/legalEntities/{id}/termsOfService/{termsofservicedocumentid}',
    description=""" Accepts Terms of Service. """,
    tags=['terms_of_service_handling', 'legal_entity_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def accept_terms_of_service(
    id: str,
    termsofservicedocumentid: str = ...,
    body: AcceptTermsOfServiceRequest = None,
):
    """
    Accept Terms of Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/legalEntities/{id}/termsOfServiceAcceptanceInfos',
    description=""" Returns Terms of Service information for a legal entity. """,
    tags=['legal_entity_operations', 'terms_of_service_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_legal_entities_id_terms_of_service_acceptance_infos(id: str):
    """
    Get Terms of Service information for a legal entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/themes',
    description=""" Returns a list of hosted onboarding page themes. """,
    tags=['onboarding_theme_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_themes():
    """
    Get a list of hosted onboarding page themes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/themes/{id}',
    description=""" Returns the details of the theme identified in the path. """,
    tags=['onboarding_theme_operations', 'legal_entity_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_themes_id(id: str):
    """
    Get an onboarding link theme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transferInstruments',
    description=""" Creates a transfer instrument. 

A transfer instrument is a bank account that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.

When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts). """,
    tags=['transfer_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_transfer_instruments(body: TransferInstrumentInfo = None):
    """
    Create a transfer instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/transferInstruments/{id}',
    description=""" Deletes a transfer instrument. """,
    tags=['transfer_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def delete_transfer_instruments_id(id: str):
    """
    Delete a transfer instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transferInstruments/{id}',
    description=""" Returns the details of a transfer instrument. """,
    tags=['transfer_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_transfer_instruments_id(id: str):
    """
    Get a transfer instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/transferInstruments/{id}',
    description=""" Updates a transfer instrument. """,
    tags=['transfer_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_transfer_instruments_id(id: str, body: TransferInstrumentInfo = None):
    """
    Update a transfer instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
